from datetime import datetime

from disnake import TextChannel, VoiceChannel

import data
from bot_init import bot
from modules.send_log_to_channel import log_to_channel
from modules.utils_data import save_data


async def send_console_style_log(channel: TextChannel):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª"""
    current_time = datetime.now().strftime("%d/%m/%Y %H:%M")

    ascii_art = f"""
```diff
+-----------------------------------------------------+
| SCPINET BOTT {current_time}                       |
|                                                     |
-->> SYSTEM BOOT SEQUENCE INITIATED                   |
-->> BOT CORE ONLINE                                  |
|                                                     |
{await get_guild_status()}           |
|                                                     |
-->> ALL SYSTEMS NOMINAL                              |
-->> AWAITING USER COMMANDS                           |
+-----------------------------------------------------+

test
```
"""
    await channel.send(ascii_art)


async def get_guild_status() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö"""
    guilds = bot.guilds
    status = []
    for i, guild in enumerate(guilds[:3], 1):
        status.append(f"|  {i}. {guild.name:<25} [{len(guild.members):>3} users]")

    if len(guilds) > 3:
        status.append(f"|  ...and {len(guilds)-3} more servers")

    return "\n".join(status)

async def cleanup_empty_voice_channels(bot, guild_id: int):
    guild = bot.get_guild(guild_id)
    if not guild:
        print(f"‚ùå Guild —Å ID {guild_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä: {guild.name} (ID: {guild.id})")

    checked_categories = set()
    for trigger_id in data.trigger_channels:
        trigger_id = int(trigger_id)  # –∫–ª—é—á–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏
        trigger_channel = guild.get_channel(trigger_id)
        if not isinstance(trigger_channel, VoiceChannel):
            print(f"‚ö†Ô∏è –¢—Ä–∏–≥–≥–µ—Ä ID {trigger_id} –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª.")
            continue

        category = trigger_channel.category
        if not category or category.id in checked_categories:
            print(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∞—Å—å: {category}")
            continue

        checked_categories.add(category.id)
        print(f"üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category.name} (ID: {category.id})")

        for channel in category.voice_channels:
            print(f"üîç –ö–∞–Ω–∞–ª: {channel.name} (ID: {channel.id}), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(channel.members)}")

            if channel.id == trigger_channel.id:
                print(f"‚õî –ü—Ä–æ–ø—É—â–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä: {channel.name}")
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            if channel.id in data.private_channels.values():
                if len(channel.members) == 0:
                    message = f"[üßπ] –£–¥–∞–ª—è—é –ü–£–°–¢–û–ô –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: {channel.name} (ID {channel.id})"
                    print(message)
                    await log_to_channel(bot=bot, message=message, codeblock=False)
                    await channel.delete()

                    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                    for user_id, ch_id in list(data.private_channels.items()):
                        if ch_id == channel.id:
                            del data.private_channels[user_id]
                            break

                    await save_data()
                else:
                    print(f"‚õî –ü—Ä–æ–ø—É—â–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π: {channel.name}")
            else:
                print(f"‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª: {channel.name}")
