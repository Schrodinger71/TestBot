from disnake import (MessageInteraction, ModalInteraction, SelectOption,
                     TextInputStyle)
from disnake.ui import Modal, Select, TextInput, UserSelect, View

from commands.utils import get_user_private_channel


class ChannelOptionsView(View):
    def __init__(self, bot, user):
        super().__init__(timeout=180)
        self.bot = bot
        self.user = user
        self.add_item(ChannelSettingsSelect(bot, user))

class ChannelSettingsSelect(Select):
    def __init__(self, bot, user):
        self.bot = bot
        self.user = user

        options = [
            SelectOption(label="üîí –ó–∞–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", value="lock", description="–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –≤—Ö–æ–¥ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"),
            SelectOption(label="üîì –û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", value="unlock", description="–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Ö–æ–¥ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"),
            SelectOption(label="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", value="name", description="–ó–∞–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞"),
            SelectOption(label="üë• –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç", value="limit", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"),
            SelectOption(label="üéö –ò–∑–º–µ–Ω–∏—Ç—å –±–∏—Ç—Ä–µ–π—Ç", value="bitrate", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏—Ç—Ä–µ–π—Ç –∫–∞–Ω–∞–ª–∞"),
            SelectOption(label="‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É", value="permit", description="–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"),
            SelectOption(label="‚õî –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", value="reject", description="–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∫–∏–∫–Ω—É—Ç—å"),
        ]

        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="channel_settings_menu"
        )

    async def callback(self, interaction: MessageInteraction):
        channel = get_user_private_channel(interaction.author)
        if not channel:
            await interaction.response.send_message("‚ùå –í—ã –Ω–µ –≤ —Å–≤–æ–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
            return

        value = self.values[0]

        if value == "lock":
            await interaction.response.defer(ephemeral=True)
            await channel.set_permissions(interaction.guild.default_role, connect=False)
            await interaction.followup.send("üîí –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö.", ephemeral=True)

        elif value == "unlock":
            await interaction.response.defer(ephemeral=True)
            await channel.set_permissions(interaction.guild.default_role, connect=True)
            await interaction.followup.send("üîì –ö–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö.", ephemeral=True)

        elif value == "name":
            await interaction.response.send_modal(NameChangeModal(channel.id))

        elif value == "limit":
            await interaction.response.send_modal(LimitChangeModal(channel.id))

        elif value == "bitrate":
            await interaction.response.send_modal(BitrateChangeModal(channel.id))

        elif value == "permit":
            await interaction.response.defer(ephemeral=True)
            await interaction.followup.send("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:", ephemeral=True, view=PermitUserView(channel))

        elif value == "reject":
            await interaction.response.defer(ephemeral=True)
            await interaction.followup.send("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", ephemeral=True, view=RejectUserView(channel))

class PermitUserView(View):
    def __init__(self, channel):
        super().__init__(timeout=60)
        self.add_item(PermitUserSelect(channel))


class PermitUserSelect(UserSelect):
    def __init__(self, channel):
        self.channel = channel
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", custom_id="permit_user_select")

    async def callback(self, interaction: MessageInteraction):
        member = self.values[0]
        await self.channel.set_permissions(member, connect=True)
        await interaction.response.send_message(f"‚úÖ {member.mention} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.", ephemeral=True)


class RejectUserView(View):
    def __init__(self, channel):
        super().__init__(timeout=60)
        self.add_item(RejectUserSelect(channel))


class RejectUserSelect(UserSelect):
    def __init__(self, channel):
        self.channel = channel
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", custom_id="reject_user_select")

    async def callback(self, interaction: MessageInteraction):
        member = self.values[0]
        await self.channel.set_permissions(member, overwrite=None)
        if member.voice and member.voice.channel == self.channel:
            await member.move_to(None)
        await interaction.response.send_message(f"‚õî {member.mention} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –¥–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.", ephemeral=True)


class NameChangeModal(Modal):
    def __init__(self, channel_id):
        self.channel_id = channel_id
        components = [
            TextInput(label="–ù–æ–≤–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞", custom_id="name", style=TextInputStyle.short)
        ]
        super().__init__(title="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–∞–Ω–∞–ª–∞", components=components)

    async def callback(self, interaction: ModalInteraction):
        channel = interaction.guild.get_channel(self.channel_id)
        name = interaction.text_values["name"].strip()
        await channel.edit(name=name)
        await interaction.response.send_message(f"üìù –ò–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: `{name}`", ephemeral=True)

class LimitChangeModal(Modal):
    def __init__(self, channel_id):
        self.channel_id = channel_id
        components = [
            TextInput(label="–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0 ‚Äî –±–µ–∑ –ª–∏–º–∏—Ç–∞)", custom_id="limit", style=TextInputStyle.short)
        ]
        super().__init__(title="–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç", components=components)

    async def callback(self, interaction: ModalInteraction):
        limit_str = interaction.text_values["limit"].strip()
        if not limit_str.isdigit():
            await interaction.response.send_message("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", ephemeral=True)
            return
        limit = int(limit_str)
        if limit > 99:
            await interaction.response.send_message("‚ùå –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 99.", ephemeral=True)
            return
        channel = interaction.guild.get_channel(self.channel_id)
        await channel.edit(user_limit=limit)
        await interaction.response.send_message(f"üë• –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit}", ephemeral=True)

class BitrateChangeModal(Modal):
    def __init__(self, channel_id):
        self.channel_id = channel_id
        components = [
            TextInput(label="–ë–∏—Ç—Ä–µ–π—Ç (8000‚Äì96000)", custom_id="bitrate", style=TextInputStyle.short)
        ]
        super().__init__(title="–ò–∑–º–µ–Ω–∏—Ç—å –±–∏—Ç—Ä–µ–π—Ç", components=components)

    async def callback(self, interaction: ModalInteraction):
        bitrate_str = interaction.text_values["bitrate"].strip()
        if not bitrate_str.isdigit():
            await interaction.response.send_message("‚ùå –ë–∏—Ç—Ä–µ–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", ephemeral=True)
            return
        bitrate = int(bitrate_str)
        if not (8000 <= bitrate <= 96000):
            await interaction.response.send_message("‚ùå –ë–∏—Ç—Ä–µ–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 8000 –¥–æ 96000.", ephemeral=True)
            return
        channel = interaction.guild.get_channel(self.channel_id)
        await channel.edit(bitrate=bitrate)
        await interaction.response.send_message("üéöÔ∏è –ë–∏—Ç—Ä–µ–π—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.", ephemeral=True)
