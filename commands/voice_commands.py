from disnake import Member, VoiceChannel
from disnake.ext import commands

import data
from bot_init import bot
from commands.utils import get_user_private_channel, has_any_role_by_keys
from modules.modal_window_voice import ChannelOptionsView
from modules.utils_data import save_data


@bot.slash_command(name="lock", description="–ó–∞–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –¥—Ä—É–≥–∏—Ö")
async def lock_channel(interaction):
    if interaction.author.voice and interaction.author.voice.channel.id in data.private_channels.values():
        channel = interaction.author.voice.channel
        await channel.set_permissions(interaction.guild.default_role, connect=False)
        await interaction.send("üîí –ö–∞–Ω–∞–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", ephemeral=True)
    else:
        await interaction.send("–í—ã –Ω–µ –≤ —Å–≤–æ–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ!", ephemeral=True)

@bot.slash_command(name="unlock", description="–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –¥—Ä—É–≥–∏—Ö")
async def unlock_channel(interaction):
    if interaction.author.voice and interaction.author.voice.channel.id in data.private_channels.values():
        channel = interaction.author.voice.channel
        await channel.set_permissions(interaction.guild.default_role, connect=True)
        await interaction.send("üîì –ö–∞–Ω–∞–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", ephemeral=True)
    else:
        await interaction.send("–í—ã –Ω–µ –≤ —Å–≤–æ–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ!", ephemeral=True)


# –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä-–∫–∞–Ω–∞–ª–∞
@bot.slash_command(description="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä-–∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
@has_any_role_by_keys("head_project")
async def add_trigger_channel(interaction, channel: VoiceChannel, tag: str):
    data.trigger_channels[channel.id] = tag
    await save_data() # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ data
    await interaction.response.send_message(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä-–∫–∞–Ω–∞–ª {channel.mention} —Å —Ç–µ–≥–æ–º '{tag}'")


# –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä-–∫–∞–Ω–∞–ª–∞
@bot.slash_command(description="–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä-–∫–∞–Ω–∞–ª")
@has_any_role_by_keys("head_project")
async def remove_trigger_channel(interaction, channel: VoiceChannel):
    if channel.id in data.trigger_channels:
        del data.trigger_channels[channel.id]
        await save_data() # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ data
        await interaction.response.send_message(f"–£–¥–∞–ª—ë–Ω —Ç—Ä–∏–≥–≥–µ—Ä-–∫–∞–Ω–∞–ª {channel.mention}")
    else:
        await interaction.response.send_message(f"–ö–∞–Ω–∞–ª {channel.mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∏–≥–≥–µ—Ä-–∫–∞–Ω–∞–ª–æ–º")


# –ú–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä-–∫–∞–Ω–∞–ª–æ–≤
@bot.slash_command(description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä-–∫–∞–Ω–∞–ª–æ–≤")
async def list_trigger_channels(interaction):
    if not data.trigger_channels:
        await interaction.response.send_message("–¢—Ä–∏–≥–≥–µ—Ä-–∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        return
    msg = "–¢—Ä–∏–≥–≥–µ—Ä-–∫–∞–Ω–∞–ª—ã:\n"
    for ch_id, tag in data.trigger_channels.items():
        msg += f"- <#{ch_id}> —Å —Ç–µ–≥–æ–º '{tag}'\n"
    await interaction.response.send_message(msg)


@bot.slash_command(name="name", description="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
async def change_name(interaction, name: str):
    await interaction.response.defer(ephemeral=True)  # –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –ø–æ–∑–∂–µ
    channel = get_user_private_channel(interaction.author)
    if channel:
        try:
            await channel.edit(name=name)
            await interaction.followup.send(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: `{name}`", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {e}", ephemeral=True)
    else:
        await interaction.followup.send("‚ùå –í—ã –Ω–µ –≤ —Å–≤–æ–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)


@bot.slash_command(name="limit", description="–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
async def change_limit(
    interaction,
    limit: int = commands.Param(default=0, description="0 ‚Äî –±–µ–∑ –ª–∏–º–∏—Ç–∞")
):
    if limit > 99:
        await interaction.response.send_message("‚ùå –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 99.", ephemeral=True)
        return

    channel = interaction.author.voice.channel if interaction.author.voice else None
    if channel and channel.id in data.private_channels.values():
        await channel.edit(user_limit=limit)
        await interaction.response.send_message(f"‚úÖ –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {limit}", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå –í—ã –Ω–µ –≤ —Å–≤–æ—ë–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)


@bot.slash_command(name="bitrate", description="–ò–∑–º–µ–Ω–∏—Ç—å –±–∏—Ç—Ä–µ–π—Ç –∫–∞–Ω–∞–ª–∞.")
async def change_bitrate(
    interaction,
    bitrate: int = commands.Param(default=64000, description="–í–≤–µ–¥–∏—Ç–µ –±–∏—Ç—Ä–µ–π—Ç (–º–∏–Ω–∏–º—É–º 8000, –º–∞–∫—Å–∏–º—É–º –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±—É—Å—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞)")
):
    if bitrate < 8000:
        await interaction.response.send_message("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç ‚Äî 8000.", ephemeral=True)
        return

    channel = get_user_private_channel(interaction.author)
    if channel:
        await channel.edit(bitrate=bitrate)
        await interaction.response.send_message("‚úÖ –ë–∏—Ç—Ä–µ–π—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå –í—ã –Ω–µ –≤ —Å–≤–æ—ë–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)


# @bot.slash_command(name="claim", description="–°—Ç–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞.")
# 
# async def claim_channel(interaction):
#     vc = interaction.author.voice.channel if interaction.author.voice else None
#     if vc and vc.id not in data.private_channels.values():
#         data.private_channels[interaction.author.id] = vc.id
#         await save_data()
#         await interaction.response.send_message("‚úÖ –í—ã —Ç–µ–ø–µ—Ä—å –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.", ephemeral=True)
#     else:
#         await interaction.response.send_message("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º: –∫–∞–Ω–∞–ª —É–∂–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –≤—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)


@bot.slash_command(name="permit", description="–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.")
async def permit_user(interaction, member: Member):
    channel = get_user_private_channel(interaction.author)
    if channel:
        await channel.set_permissions(member, connect=True)
        await interaction.response.send_message(f"‚úÖ {member.mention} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå –í—ã –Ω–µ –≤ —Å–≤–æ–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)


@bot.slash_command(name="reject", description="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∏–∫).")
async def reject_user(interaction, member: Member):
    channel = get_user_private_channel(interaction.author)
    if channel:
        await channel.set_permissions(member, overwrite=None)
        if member.voice and member.voice.channel == channel:
            await member.move_to(None)
        await interaction.response.send_message(f"‚õî {member.mention} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –¥–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå –í—ã –Ω–µ –≤ —Å–≤–æ–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)


@bot.slash_command(name="settings", description="–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º")
async def open_settings_menu(interaction):
    await interaction.response.send_message(
        "‚öôÔ∏è –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º:",
        view=ChannelOptionsView(bot, interaction.author),
        ephemeral=True
    )
